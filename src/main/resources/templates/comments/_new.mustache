<div class="card m-2" id="comments-new">
    <div class="card-body">
        <!-- 댓글 작성 폼 -->
        <form>
            <div class="mb-3">
                <label class="form-label">닉네임</label>
                <input type="text" class="form-control" id="new-comment-nickname">
            </div>
            <div class="mb-3">
                <label class="form-label">댓글 내용</label>
                <textarea type="text" class="form-control" rows="3" id="new-comment-body"></textarea>
            </div>
            <!-- 히든 인풋. ( 댓글은 부모게시글의 id값을 가지고있어야함. 댓글이 게시글에 종속되기 때문임.
             이를 위해 부모게시글의 id를 히든인풋으로. -->
            <!-- 히든인풋은, 웹페이지에 표시되지 않는요소. 보이지는 않으나 값을 가지고 있어야할때 사용 -->
            {{#article}}
                <input type="hidden" id="new-comment-article-id" value="{{id}}">
            {{/article}}

            <button type="button" class="btn btn-primary" id="comment-create-btn">댓글 작성</button> <!-- 전송버튼 -->
        </form>
    </div>
</div>
<script>
    {
        // 댓글 생성 버튼 변수화
        const commentCreateBtn = document.querySelector("#comment-create-btn");

        // 댓글 클릭 이벤트 감지
        commentCreateBtn.addEventListener("click", function() {
            //새 댓글 객체 생성
            const comment = {
                // 새 댓글의 닉네임 ( 객체 리터럴 방식 사용), 닉네임,본문,부모게시글id값은, #id값.value
                nickname: document.querySelector("#new-comment-nickname").value,
                //새 댓글의 본문
                body: document.querySelector("#new-comment-body").value,
                //부모 게시글의 id
                articleId: document.querySelector(" #new-comment-article-id").value
            };
            // 댓글 객체 출력
            console.log(comment);
            // fetch() - 비동기 통신을 위한 API,
            const url = "/api/articles/" + comment.articleId + "/comments";

            //REST API호출과 응답 처리
            fetch(url,{
                method:"POST", //POST요청
                headers:{
                    "Content-Type":"application/json" //전송 본문의 데이터 타입(JSON)정보
                },
                body: JSON.stringify(comment) // comment객체를 JSON 문자열로 변환해 전송
            }).then(response => {
                //HTTP 응답코드에 따른 메시지 출력
                // 응답객체의 상태가 ok면, "댓글등록이 됐습니다. 아니면 "댓글등록 실패"(댓글등록 성공,실패에 관한 구문)
                const msg = (response.ok) ? "댓글이 등록됐습니다." : "댓글 등록 실패..!"; // 응답처리
                alert(msg);

                // 댓글생성이 완료되고, 메시지 출력됬다면 , 페이지를 새로고침
                window.location.reload(); // 새로고침
            })
        });
    }
</script>

<!-- card m-2 는, card스타일을 사용하고, 여백을 2 만큼 주는것
id="comments-new"는 이 요소를 유일하게 구분하기 위한 id임-->


<!-- querySelector() 메서드는, 웹페이지의 특정요소를 선택할때 사용.
메서드에 id, name, class, HTML 태그 등의 값을 입력하면 해당속성값을
가진대상을 반환함. -->

<!-- id값으로 대상을 찾을때는, id값 앞에 #을 붙임. 이를 아이디선택자(#id) 라고함 -->

<!-- addEventListener() 메서드는, HTML문서의 특정요소가 이벤트를 감지함.
해당요소에 이벤트가 발생하면, 지정된 함수가 실행됨 -->
